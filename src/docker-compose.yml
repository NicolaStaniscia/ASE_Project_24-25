services:
  auction_market:
    build:
      context: ./market/auction_market
    container_name: auction_market
    environment:
      - MARKET_DB_URI=mysql+pymysql://root:root@mysql:3306/market_db
    networks:
      - backend
    depends_on:
      - db-manager
      - mysql
  
  trading_history:
    build:
      context: ./market/trading_history
    container_name: trading_history
    environment:
      - MARKET_DB_URI=mysql+pymysql://root:root@mysql:3306/market_db
    networks:
      - backend
    depends_on:
      - db-manager
      - mysql
  
  see_gacha_collection:
    build: ./collection/see_gacha_collection
    container_name: see_gacha_collection
    restart: always
    depends_on:
      - collection_db_manager
    ports:
      - 5007:5007
    environment:
      - JWT_PASSWORD=JwtGACHA2425
      - JWT_LOCATION=headers
    networks:
      - backend
  
  edit_gacha_collection:
    build: ./collection/edit_gacha_collection
    container_name: edit_gacha_collection
    restart: always
    depends_on:
      - collection_db_manager
    ports:
      - 5008:5008
    environment:
      - JWT_PASSWORD=JwtGACHA2425  # To test remove secrets
      - JWT_LOCATION=headers
    networks:
      - backend
    
  roll_gacha:
    build: ./collection/roll_gacha
    container_name: roll_gacha
    restart: always
    depends_on:
      - collection_db
    ports:
      - 5009:5009
    environment:
      - JWT_PASSWORD=JwtGACHA2425  # /run/secrets/jwt_password
      - JWT_LOCATION=headers
    networks:
      - backend
  
  account_management:
    build: ./users/account_management
    container_name: account_management
    restart: always
    depends_on:
      - users_db_manager
    networks:
      - backend

  db-manager:
    build:
      context: ./market/dbm
    container_name: db_manager
    ports:
      - "5001:5000" # Esposta per debug
    networks:
      - backend
    depends_on:
      - mysql
    environment:
      - MARKET_DB_URI=mysql+pymysql://root:root@mysql:3306/market_db

  collection_db_manager:
    build: ./collection/collection_db_manager
    container_name: collection_db_manager
    restart: always
    environment:
      MYSQL_HOST: collection_db
      MYSQL_USER: collection_manager
      MYSQL_PASSWORD: TOSCAgha69
      MYSQL_DATABASE: collection_db
    ports:
      - 5010:5010
    depends_on:
      - collection_db
    networks:
      - backend

  users_db_manager:
    build: ./users/db_manager
    container_name: users_db_manager
    depends_on:
      - users_db
    networks:
      - backend
  
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: market_db
    ports:
      - "3306:3306"
    volumes:
      - ./market/data/mysql:/var/lib/mysql
      - ./init_db/init_market.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  collection_db:
    image: mysql:latest
    container_name: collection_db
    restart: always
    volumes:
      - ./collection/collection_db:/var/lib/mysql:rw
      - ./init_db/data_collection.csv:/var/lib/mysql-files/data_collection.csv
      - ./init_db/init_collection.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      MYSQL_ROOT_PASSWORD: Spin&Go_2425
      MYSQL_DATABASE: collection_db
      MYSQL_USER: collection_manager
      MYSQL_PASSWORD: TOSCAgha69
    ports:
      - 3307:3307
    networks:
      - backend

  users_db:
    image: mysql:latest  
    container_name: users_db
    environment:
      MYSQL_ROOT_PASSWORD: ase2425!
      MYSQL_DATABASE: account_management
      MYSQL_USER: user
      MYSQL_PASSWORD: ase2425
    ports:
      - "3308:3308"
    volumes:
      - ./users/db_data:/var/lib/mysql
      - ./init_db/users.csv:/var/lib/mysql-files/users.csv
      - ./init_db/init_users.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  api_gateway:
    image: nginx:latest
    container_name: api_gateway
    ports:
      - "8080:443" #accesso user
      - "8081:444" #accesso admin
    networks:
      - frontend
      - backend
      - admin_frontend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
    depends_on:
      - auction_market
      - trading_history
      - see_gacha_collection
      - edit_gacha_collection
      - roll_gacha
      - account_management
    restart: on-failure

networks:
  frontend:
  backend:
  admin_frontend:
