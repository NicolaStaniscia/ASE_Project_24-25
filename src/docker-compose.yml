services:
  auction_market:
    build:
      context: ./market/auction_market
    container_name: auction_market
    networks:
      - backend
    depends_on:
      - db-manager
      - mysql
    secrets:
      - market_db_uri
      - jwt_password
      - auction_market_cert
      - auction_market_key
  
  trading_history:
    build:
      context: ./market/trading_history
    container_name: trading_history
    networks:
      - backend
    depends_on:
      - db-manager
      - mysql
    secrets:
      - market_db_uri
      - jwt_password
      - trading_history_cert
      - trading_history_key
  
  see_gacha_collection:
    build: ./collection/see_gacha_collection
    container_name: see_gacha_collection
    restart: always
    depends_on:
      - collection_db_manager
    ports:
      - 5007:5007
    environment:
      - JWT_LOCATION=headers
    networks:
      - backend
    secrets:
      - jwt_password
      - see_gacha_collection_cert
      - see_gacha_collection_key
  
  edit_gacha_collection:
    build: ./collection/edit_gacha_collection
    container_name: edit_gacha_collection
    restart: always
    depends_on:
      - collection_db_manager
    ports:
      - 5008:5008
    environment:
      - JWT_LOCATION=headers
    networks:
      - backend
    secrets:
      - jwt_password
      - edit_gacha_collection_cert
      - edit_gacha_collection_key
    
  roll_gacha:
    build: ./collection/roll_gacha
    container_name: roll_gacha
    restart: always
    depends_on:
      - collection_db
    ports:
      - 5009:5009
    environment:
      - JWT_LOCATION=headers
    networks:
      - backend
    secrets:
      - jwt_password
      - roll_gacha_cert
      - roll_gacha_key
  
  account_management:
    build: ./users/account_management
    container_name: account_management
    restart: always
    depends_on:
      - users_db_manager
    networks:
      - backend
    secrets:
      - jwt_password
      - account_management_cert
      - account_management_key

  db-manager:
    build:
      context: ./market/dbm
    container_name: db_manager
    ports:
      - "5001:5000" # Esposta per debug
    networks:
      - backend
    depends_on:
      - mysql
    secrets:
      - jwt_password
      - market_db_uri
      - market_dbm_cert
      - market_dbm_key

  collection_db_manager:
    build: ./collection/collection_db_manager
    container_name: collection_db_manager
    restart: always
    environment:
      MYSQL_HOST: collection_db
      MYSQL_USER: collection_manager
      MYSQL_DATABASE: collection_db
    ports:
      - 5010:5010
    depends_on:
      - collection_db
    networks:
      - backend
    secrets:
      - collection_mysql_password
      - collection_db_manager_cert
      - collection_db_manager_key

  users_db_manager:
    build: ./users/db_manager
    container_name: users_db_manager
    depends_on:
      - users_db
    networks:
      - backend
    secrets:
      - account_mysql_password
      - account_db_manager_cert
      - account_db_manager_key
  
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/market_mysql_root_password
      MYSQL_DATABASE: market_db
    ports:
      - "3306:3306"
    volumes:
      - ./market/data/mysql:/var/lib/mysql
      - ./init_db/init_market.sql:/docker-entrypoint-initdb.d/init.sql
      - ./init_db/my.cnf:/etc/mysql/my.cnf:ro
    networks:
      - backend
    secrets:
      - market_mysql_root_password

  collection_db:
    image: mysql:latest
    container_name: collection_db
    restart: always
    volumes:
      - ./collection/collection_db:/var/lib/mysql:rw
      - ./init_db/data_collection.csv:/var/lib/mysql-files/data_collection.csv
      - ./init_db/owned_collection.csv:/var/lib/mysql-files/owned_collection.csv
      - ./init_db/init_collection.sql:/docker-entrypoint-initdb.d/init.sql
      - ./init_db/my.cnf:/etc/mysql/my.cnf:ro
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/collection_mysql_root_password
      MYSQL_DATABASE: collection_db
      MYSQL_USER: collection_manager
      MYSQL_PASSWORD_FILE: /run/secrets/collection_mysql_password
    ports:
      - 3307:3307
    networks:
      - backend
    secrets:
      - collection_mysql_root_password
      - collection_mysql_password

  users_db:
    image: mysql:latest  
    container_name: users_db
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/account_mysql_root_password
      MYSQL_DATABASE: account_management
      MYSQL_USER: user
      MYSQL_PASSWORD_FILE: /run/secrets/account_mysql_password
    ports:
      - "3308:3308"
    volumes:
      - ./users/db_data:/var/lib/mysql
      - ./init_db/users.csv:/var/lib/mysql-files/users.csv
      - ./init_db/init_users.sql:/docker-entrypoint-initdb.d/init.sql
      - ./init_db/my.cnf:/etc/mysql/my.cnf:ro
    networks:
      - backend
    secrets:
      - account_mysql_root_password
      - account_mysql_password

  api_gateway:
    image: nginx:latest
    container_name: api_gateway
    ports:
      - "8080:443" #accesso user
      - "8081:444" #accesso admin
    networks:
      - frontend
      - backend
      - admin_frontend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
    depends_on:
      - auction_market
      - trading_history
      - see_gacha_collection
      - edit_gacha_collection
      - roll_gacha
      - account_management
    restart: on-failure
    secrets:
      - user_api_cert
      - user_api_key
      - admin_api_cert
      - admin_api_key

networks:
  frontend:
  backend:
  admin_frontend:

secrets:

  # Collection secrets
  collection_mysql_root_password:
    file: ./secrets/collection_mysql_root_password.txt
  collection_mysql_password: 
    file: ./secrets/collection_mysql_password.txt
  jwt_password:
    file: ./secrets/jwt_password.txt

  # Account management secrets
  account_mysql_root_password: 
    file: ./secrets/account_mysql_root_password.txt
  account_mysql_password: 
    file: ./secrets/account_mysql_password.txt

  # Market secrets
  market_mysql_root_password: 
    file: ./secrets/market_mysql_root_password.txt
  market_db_uri:
    file: ./secrets/market_db_uri.txt

  # Collection TLS
  collection_db_manager_cert:
    file: ./secrets/https/collection_db_manager/cert.pem
  collection_db_manager_key:
    file: ./secrets/https/collection_db_manager/key.pem
  see_gacha_collection_cert:
    file: ./secrets/https/see_gacha_collection/cert.pem
  see_gacha_collection_key:
    file: ./secrets/https/see_gacha_collection/key.pem
  edit_gacha_collection_cert:
    file: ./secrets/https/edit_gacha_collection/cert.pem
  edit_gacha_collection_key:
    file: ./secrets/https/edit_gacha_collection/key.pem
  roll_gacha_cert:
    file: ./secrets/https/roll_gacha/cert.pem
  roll_gacha_key:
    file: ./secrets/https/roll_gacha/key.pem

  # Account management TLS
  account_db_manager_cert:
    file: ./secrets/https/account_db_manager/cert.pem
  account_db_manager_key:
    file: ./secrets/https/account_db_manager/key.pem
  account_management_cert:
    file: ./secrets/https/account_management/cert.pem
  account_management_key:
    file: ./secrets/https/account_management/key.pem

  # Market TLS
  market_dbm_cert:
    file: ./secrets/https/market_dbm/cert.pem
  market_dbm_key:
    file: ./secrets/https/market_dbm/key.pem
  auction_market_cert:
    file: ./secrets/https/auction_market/cert.pem
  auction_market_key:
    file: ./secrets/https/auction_market/key.pem
  trading_history_cert:
    file: ./secrets/https/trading_history/cert.pem
  trading_history_key:
    file: ./secrets/https/trading_history/key.pem

  # API GATEWAY TLS
  user_api_cert:
    file: ./secrets/https/user_api/cert.pem
  user_api_key:
    file: ./secrets/https/user_api/key.pem
  admin_api_cert:
    file: ./secrets/https/admin_api/cert.pem
  admin_api_key:
    file: ./secrets/https/admin_api/key.pem