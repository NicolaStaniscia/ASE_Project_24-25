openapi: 3.0.0
info:
  title: Admin Account Management API
  description: API for admin operations such as managing users and viewing payments history.
  version: 1.0.0

servers:
  - url: https://localhost:8081/
    description: Account Management Service


paths:

  /account_management/get_username/{user_id}:
      get:
        summary: Get username by user ID
        description: Retrieve a username based on the provided user ID. Requires a valid JWT token with `admin` role.
        parameters:
          - name: user_id
            in: path
            required: true
            description: The ID of the user whose username needs to be retrieved.
            schema:
              type: integer
              example: 123
        security:
          - BearerAuth: [] # Requires JWT token for this endpoint
        responses:
          '200':
            description: Successfully retrieved the username.
          '400':
            description: Bad request due to invalid parameters.
          '403':
            description: Unauthorized access for non-admin users.
          '500':
            description: Failed to connect to the DB Manager or internal server error.


  /account_management/admin/login:
    post:
      summary: Admin login
      description: Admin login endpoint that returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successful login with JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  status:
                    type: string
        '401':
          description: Invalid credentials
        '500':
          description: Server error, failed to connect to DB Manager

  /account_management/admin/view_users:
    get:
      summary: View all users
      description: Allows admin to view a list of all users or a specific user.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: username
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully fetched user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    additionalProperties: true
        '403':
          description: Unauthorized, not an admin
        '500':
          description: Server error, failed to connect to DB Manager

  /account_management/admin/modify_user:
    patch:
      summary: Modify a user's in-game currency
      description: Allows admin to modify a user's currency.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                new_currency:
                  type: integer
              required:
                - username
                - new_currency
      responses:
        '200':
          description: Successfully modified user currency
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    additionalProperties: true
        '400':
          description: Bad request, missing required fields
        '403':
          description: Unauthorized, not an admin
        '500':
          description: Server error, failed to connect to DB Manager

  /account_management/admin/check_payments_history/{username}:
    get:
      summary: Check a user's payments history
      description: Allows admin to view a user's payment history.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully fetched payment history
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    additionalProperties: true
        '400':
          description: Bad request, missing username
        '403':
          description: Unauthorized, not an admin
        '500':
          description: Server error, failed to connect to DB Manager

components:
  securitySchemes:
    BearerAuth:
      type: http  # Usare 'http' per il tipo di schema
      scheme: bearer  # Specifica che il tipo di schema è 'bearer'
      bearerFormat: JWT  # Specifica che il formato del token è JWT