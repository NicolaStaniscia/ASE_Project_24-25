openapi: 3.0.0

info:
  title: User API Gateway
  description: All operations related to users
  version: 1.0.0

servers:
  - url: https://localhost:8080
    description: User API Gateway

tags:
  - name: Account management
    description: Manage own account
  - name: See gacha collection
    description: Visualize gacha
  - name: Roll a gacha
    description: Add a random gacha to your collection
  - name: Auction market
    description: Gacha market
  - name: Trading history
    description: See own trading history in the market

paths:
  /account_management/create_user_account:
    post:
      tags:
        - Account management
      summary: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the new user.
                  example: user123
                password:
                  type: string
                  description: The password for the new user account.
                  example: secure_password_123
      responses:
        '201':
          description: User account successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    description: Response from the DB Manager confirming account creation.
                    example: { "message": "User user123 created successfully" }
        '400':
          description: Missing parameters in the request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "username and password are required"
        '409':
          description: User already exists in the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User already exists"
        '500':
          description: Server or DB Manager error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to connect to DB Manager"
                  details:
                    type: string
                    description: Additional information about the failure.
                    example: "Connection refused"

  /account_management/login:
    post:
      tags:
        - Account management
      summary: Login a user and get an access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user.
                  example: user123
                password:
                  type: string
                  description: The user's password.
                  example: secure_password_123
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The JWT access token for the user.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  status:
                    type: string
                    description: A message indicating successful login.
                    example: "Login completed successfully"
        '400':
          description: Missing parameters in the request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "username and password are required"
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
        '500':
          description: Server or DB Manager error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to connect to DB Manager"
                  details:
                    type: string
                    description: Additional information about the failure.
                    example: "Connection refused"

  /account_management/logout:
    post:
      tags:
        - Account management
      summary: User logout
      description: Logs out a user by revoking their JWT access token, ensuring it can no longer be used.
      security:
        - BearerAuth: []  # Requires a valid JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user who wants to log out.
                  example: user123
      responses:
        '200':
          description: Logout successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation of successful logout and token revocation.
                    example: "user123 logged out, token revoked."
        '400':
          description: Missing parameters in the request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "username is required"
        '401':
          description: Invalid or missing JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing or invalid token"
        '403':
          description: Unauthorized logout attempt.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        
  /account_management/modify_user_account:
    patch:
      tags:
        - Account management
      summary: Modify user account details
      description: Allows users to modify their password.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the account to modify.
                  example: user123
                new_password:
                  type: string
                  description: The new password for the account.
                  example: new_secure_password_123
      responses:
        '200':
          description: Password successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    description: Response from the DB Manager confirming the update.
                    example: { "message": "User:user123. Password modified successfully, you need to log in again." }
        '400':
          description: Missing required parameters in the request body.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "username and new_password are required"
        '401':
          description: Invalid or missing JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing or invalid token"
        '403':
          description: Unauthorized modification attempt.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Server or DB Manager error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to connect to DB Manager"
                  details:
                    type: string
                    description: Additional information about the failure.
                    example: "Connection refused"

  /account_management/delete_user_account/{username}:
    delete:
      tags:
        - Account management
      summary: Delete user account
      description: Only the authenticated user can delete their account, and the JWT token is revoked upon success.
      security:
        - BearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
            example: user123
      responses:
        '200':
          description: Account successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    description: Response from the DB Manager confirming the deletion.
                    example: { "message": "User:user123 eliminated successfully." }
        '400':
          description: Missing required parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "username is required"
        '401':
          description: Invalid or missing JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing or invalid token"
        '403':
          description: Unauthorized deletion attempt.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Server or DB Manager error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to connect to DB Manager"
                  details:
                    type: string
                    description: Additional information about the failure.
                    example: "Connection refused"

  /account_management/buy_in_game_currency:
    post:
      tags:
        - Account management
      summary: Buy in-game currency
      description: Allows an authenticated user to buy in-game currency by selecting a predefined pack (1,2 o 3).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - pack
              properties:
                username:
                  type: string
                  example: user123
                pack:
                  type: integer
                  description: The currency pack to purchase. Valid values are 1, 2, or 3.
                  enum: [1, 2, 3]
                  example: 2
      responses:
        '201':
          description: In-game currency successfully added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    description: Confirmation message from the DB Manager.
                    example: { "message": "Transaction successful, currency updated." }
        '400':
          description: Missing required parameters or invalid pack selection.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "username and pack are required"
        '401':
          description: Invalid or missing JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing or invalid token"
        '403':
          description: Unauthorized access. The username does not match the authenticated user or the role is not authorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Server or DB Manager error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to connect to DB Manager"
                  details:
                    type: string
                    description: Additional information about the failure.
                    example: "Connection refused"

  /collection:
    get:
      tags:
        - See gacha collection
      summary: Recupera la collezione dell'utente
      description: Restituisce la collezione personale dell'utente autenticato. Solo gli utenti con ruolo `user` possono accedere a questo endpoint.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Collezione recuperata con successo
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gachaId:
                      type: integer
                    idOwn:
                      type: integer
                    image:
                      type: string
                      format: uri
                    name:
                      type: string
                    rarity:
                      type: string
        '401':
          description: Campo "Authorization" mancante
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing Authorization Header"
        '403':
          description: Accesso vietato, solo gli utenti possono accedere alla collezione
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Access forbidden: only users can own a collection"
        '500':
          description: Errore interno del server o richiesta fallita
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /collection/grouped:
    get:
      tags:
        - See gacha collection
      summary: Recupera la collezione raggruppata dell'utente
      description: Restituisce la collezione dell'utente autenticato con gli oggetti raggruppati per ID, includendo la quantità di ciascun oggetto.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Collezione raggruppata recuperata con successo
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    image:
                      type: string
                      format: uri
                    name:
                      type: string
                    quantity:
                      type: integer
                    rarity:
                      type: string
        '401':
          description: Campo "Authorization" mancante
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing Authorization Header"
        '403':
          description: Accesso vietato, solo gli utenti possono accedere alla collezione
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Access forbidden: only users can own a collection"
        '500':
          description: Errore interno del server o richiesta fallita
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /collection/{gacha_id}:
    get:
      tags:
        - See gacha collection
      summary: Recupera le informazioni su uno specifico gacha posseduto
      description: Restituisce le informazioni dettagliate su un gacha specifico se l'utente lo possiede.
      security:
        - BearerAuth: []
      parameters:
        - name: gacha_id
          in: path
          required: true
          description: ID del gacha da visualizzare
          schema:
            type: integer
      responses:
        '200':
          description: Informazioni sul gacha recuperate con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  accuracy:
                    type: integer
                  critical:
                    type: number
                    format: float
                  damage:
                    type: integer
                  extractionProb:
                    type: number
                    format: float
                  id:
                    type: integer
                  image:
                    type: string
                    format: uri
                  name:
                    type: string
                  rarity:
                    type: string
                  speed:
                    type: integer
        '400':
          description: Richiesta malformata. gacha_id obbligatorio
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Gacha ID missing"
        '401':
          description: Campo "Authorization" mancante
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing Authorization Header"
        '403':
          description: Accesso vietato, solo gli utenti possono visualizzare la collezione
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Access forbidden: only users can own a collection"
        '404':
          description: Gacha non posseduto dall'utente o non trovato
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Gacha not owned"
        '500':
          description: Errore interno del server o richiesta fallita
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /system_collection:
    get:
      tags:
        - See gacha collection
      summary: Recupera la collezione di gacha di sistema
      description: Restituisce una lista di tutti i gacha disponibili nel sistema.
      responses:
        '200':
          description: Collezione di sistema recuperata con successo
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    extractionProb:
                      type: number
                      format: float
                    id:
                      type: integer
                    image:
                      type: string
                      format: uri
                    name:
                      type: string
                    rarity:
                      type: string
        '500':
          description: Errore interno del server o richiesta fallita
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /system_collection/{gacha_id}:
    get:
      tags:
        - See gacha collection
      summary: Recupera i dettagli di un gacha specifico
      parameters:
        - name: gacha_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Dettagli del gacha recuperati con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  accuracy:
                    type: integer
                  critical:
                    type: number
                    format: float
                  damage:
                    type: integer
                  extractionProb:
                    type: number
                    format: float
                  id:
                    type: integer
                  image:
                    type: string
                    format: uri
                  name:
                    type: string
                  rarity:
                    type: string
                  speed:
                    type: integer
        '404':
          description: Gacha non trovato
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Gacha not found"
        '500':
          description: Errore interno del server o richiesta fallita
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /roll/standard:
    post:
      tags:
        - Roll a gacha
      summary: Esegue un "gacha roll" standard per un utente autenticato.
      security:
        - BearerAuth: []
      requestBody:
        description: None
        required: false
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        '200':
          description: Roll eseguito con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
        '400':
          description: Richiesta non valida, ad esempio per punti insufficienti.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You don't have enough points
        '401':
          description: Campo "Authorization" mancante
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing Authorization Header"
        '403':
          description: Accesso negato, l'utente non ha il ruolo corretto.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Only users can roll a gacha
        '500':
          description: Errore interno del server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /roll/gold:
    post:
      tags:
        - Roll a gacha
      summary: Esegue un roll "gold" del sistema gacha.
      security:
        - BearerAuth: []
      requestBody:
        description: None
        required: false
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        '200':
          description: Roll effettuato con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
        '400':
          description: Punti insufficienti per effettuare il roll.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You don't have enough points"
        '401':
          description: Campo "Authorization" mancante
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing Authorization Header" 
        '403':
          description: L'utente non ha il ruolo necessario per accedere a questo endpoint.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Only users can roll a gacha"
        '500':
          description: Errore interno del server o fallimento nella comunicazione con il gestore della collezione.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /roll/platinum:
    post:
      tags:
        - Roll a gacha
      summary: Esegue un roll "platinum" del sistema gacha.
      security:
        - BearerAuth: []
      requestBody:
        description: None
        required: false
        content:
          application/json:
            schema:
              type: object
              example: {}
      responses:
        '200':
          description: Roll effettuato con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
        '400':
          description: Punti insufficienti per effettuare il roll.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You don't have enough points"
        '401':
          description: Campo "Authorization" mancante
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Missing Authorization Header"
        '403':
          description: L'utente non ha il ruolo necessario per accedere a questo endpoint.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Only users can roll a gacha"
        '500':
          description: Errore interno del server o fallimento nella comunicazione con il gestore della collezione.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /auction_market/market:
    get:
      tags:
        - Auction market
      summary: Recupera le aste attive
      description: Ottiene l'elenco delle aste attualmente attive dal sistema.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Elenco delle aste attive recuperato con successo
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: ID dell'asta
                    gacha_id:
                      type: integer
                      description: ID del gacha associato
                    seller_id:
                      type: integer
                      description: ID del venditore
                    starting_price:
                      type: integer
                      description: Prezzo iniziale dell'asta
                    current_price:
                      type: integer
                      description: Prezzo corrente dell'asta
                    auction_end:
                      type: string
                      format: date-time
                      description: Data e ora di fine dell'asta
                    status:
                      type: string
                      enum: [active, closed, canceled, suspended]
                      description: Stato dell'asta
        401:
          description: Utente non autenticato
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Missing Authorization Header
        500:
          description: Errore interno del server
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error communicating with DBM: [dettagli errore]"

    post:
      tags:
        - Auction market
      summary: Crea una nuova asta
      description: Crea una nuova asta per un oggetto Gacha specifico. Richiede autenticazione e verifica che il Gacha appartenga all'utente.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - gacha_id
                - seller_id
                - starting_price
                - auction_end
              properties:
                gacha_id:
                  type: integer
                  description: ID del Gacha da mettere all'asta.
                  example: 123
                seller_id:
                  type: integer
                  description: ID dell'utente venditore.
                  example: 456
                starting_price:
                  type: integer
                  description: Prezzo di partenza dell'asta.
                  example: 100
                auction_end:
                  type: string
                  format: date-time
                  description: Data e ora di fine asta.
                  example: "2024-12-10 15:00:00"
      responses:
        201:
          description: Asta creata con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Auction created successfully"
                  auction_id:
                    type: integer
                    example: 789
        400:
          description: Richiesta non valida (campi mancanti o formato errato).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing required fields"
        403:
          description: Utente non autorizzato a creare l'asta per il venditore specificato.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not authorized to create auction for this seller"
        404:
          description: Gacha non trovato nella collezione dell'utente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Gacha not found in user collection"
        409:
          description: Gacha già presente in un'asta attiva.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Gacha is already listed in an active auction"
        500:
          description: Errore interno del server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error communicating with DBM: [dettagli errore]"

  /auction_market/market/bid:
    post:
      tags:
        - Auction market
      summary: Effettua un'offerta su un'asta
      description: Consente a un utente autenticato di fare un'offerta per un'asta specifica, verificando il credito disponibile e aggiornandolo.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - auction_id
                - bidder_id
                - bid_amount
              properties:
                auction_id:
                  type: integer
                  description: ID dell'asta su cui fare l'offerta.
                  example: 123
                bidder_id:
                  type: integer
                  description: ID dell'utente che effettua l'offerta.
                  example: 456
                bid_amount:
                  type: integer
                  description: Importo dell'offerta in crediti.
                  example: 150
      responses:
        201:
          description: Offerta effettuata con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    description: Messaggio di successo dell'offerta
                    example: Currency updated
        400:
          description: Richiesta non valida (campi mancanti o condizioni non soddisfatte).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bid amount must be greater than zero"
        403:
          description: Utente non autorizzato a fare un'offerta.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not authorized to place bid on behalf of this bidder"
        404:
          description: Risorsa non trovata (utente o asta inesistente).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Auction not found"
        500:
          description: Errore interno del server o fallimento nella comunicazione con i moduli esterni.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to communicate with db_manager: [dettagli errore]"

  /auction_market/market/auction_win:
    post:
      tags:
        - Auction market
      summary: Completa il processo di trasferimento del gacha al vincitore dell'asta
      description: Endpoint che gestisce il trasferimento del gacha al vincitore di un'asta completata. Verifica l'asta e il vincitore, quindi trasferisce la proprietà del gacha tramite il modulo COLLECTION.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - auction_id
              properties:
                auction_id:
                  type: integer
                  description: ID dell'asta per cui completare il trasferimento.
                  example: 123
      responses:
        200:
          description: Trasferimento del gacha completato con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Gacha successfully transferred to winner 456"
        400:
          description: Errore di validazione o mancanza di corrispondenza tra vincitore e offerta più alta.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Winner does not match highest bid"
        404:
          description: L'asta non è stata trovata o non è stata chiusa.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Auction not found or not closed"
        500:
          description: Errore interno o problemi con la comunicazione ai moduli esterni.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to transfer gacha ownership"

  /auction_market/market/auction_complete:
    post:
      tags:
        - Auction market
      summary: Completa un'asta e trasferisce la valuta al venditore
      description: Endpoint per completare un'asta, trasferendo la valuta al venditore e registrando la transazione nella cronologia degli scambi.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - auction_id
              properties:
                auction_id:
                  type: integer
                  description: ID dell'asta da completare.
                  example: 123
      responses:
        200:
          description: Transazione completata con successo e valuta trasferita al venditore.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Currency transferred to seller successfully"
        400:
          description: Errore nella validazione dei dati o se l'asta non ha un'offerta valida.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bid not found"
        404:
          description: L'asta specificata non è stata trovata o non è stata chiusa.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Auction not found or not closed"
        500:
          description: Errore interno o problemi di comunicazione con i moduli esterni.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to record transaction in trading history"
  
  /auction_market/market/auction_refund:
    post:
      tags:
        - Auction market
      summary: Rimborso per i partecipanti all'asta non vincitori
      description: Endpoint per elaborare il rimborso per tutti i partecipanti a un'asta chiusa che non sono riusciti a vincere.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - auction_id
              properties:
                auction_id:
                  type: integer
                  description: ID dell'asta per la quale processare i rimborsi.
                  example: 123
      responses:
        200:
          description: Rimborso elaborato con successo per tutti i partecipanti non vincenti.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Refund processed for all losing bidders"
        404:
          description: L'asta specificata non è stata trovata.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Auction not found or not closed"
        500:
          description: Errore interno o problema nella comunicazione con i moduli esterni.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to fetch auction details"

# TRADING_HISTORY
  /trading_history/market/transaction_history:
    get:
      tags:
        - Trading history
      summary: Recupera la cronologia delle transazioni di un utente
      description: Endpoint per ottenere la cronologia delle transazioni di un utente specifico.
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: query
          required: true
          description: ID dell'utente di cui recuperare la cronologia delle transazioni.
          schema:
            type: integer
            example: 123
      responses:
        200:
          description: Cronologia delle transazioni recuperata con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      type: object
                      properties:
                        transaction_id:
                          type: integer
                          example: 456
                        seller_id:
                          type: integer
                          example: 123
                        buyer_id:
                          type: integer
                          example: 789
                        gacha_id:
                          type: integer
                          example: 101
                        price:
                          type: integer
                          example: 500
                        date:
                          type: string
                          format: date-time
                          example: "2023-12-04T15:00:00Z"
        400:
          description: Errore di validazione o formato non valido per user_id.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid User ID format"
        403:
          description: L'utente non è autorizzato ad accedere alla cronologia delle transazioni di un altro utente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "You are not authorized to access this user's transactions"
        404:
          description: Nessuna transazione trovata per l'utente specificato.
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items: {}
                  message:
                    type: string
                    example: "No transactions found for this user"
        500:
          description: Errore interno durante la comunicazione con il DBM.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error communicating with DBM: <error details>"

  /trading_history/market/transaction:
    post:
      tags:
        - Trading history
      summary: Registra una transazione di mercato
      description: Endpoint per registrare una transazione di mercato, chiamato solo dal processo di completamento dell'asta.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                auction_id:
                  type: integer
                  description: ID dell'asta per cui si sta registrando la transazione.
                  example: 123
                buyer_id:
                  type: integer
                  description: ID dell'acquirente della transazione.
                  example: 456
                seller_id:
                  type: integer
                  description: ID del venditore della transazione.
                  example: 789
                final_price:
                  type: integer
                  description: Prezzo finale della transazione.
                  example: 1000
      responses:
        200:
          description: Transazione registrata con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Transaction recorded successfully"
        400:
          description: Errore nella validazione dei campi richiesti o formato non valido.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "All fields are required"
        404:
          description: Risorsa non trovata. Potrebbe riferirsi al fallimento nel recuperare informazioni o dati.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not found"
        500:
          description: Errore interno del server durante il processo di registrazione della transazione.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Transaction failed: <error details>"
  
  /trading_history/market/refund:
    post:
      tags:
        - Trading history
      summary: Processa un rimborso per un'asta
      description: Endpoint per elaborare i rimborsi per aste attive e per quelle scadute, aggiornando il saldo dell'utente e registrando la transazione di rimborso.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ID dell'utente a cui deve essere effettuato il rimborso.
                  example: 123
                auction_id:
                  type: integer
                  description: ID dell'asta associata al rimborso.
                  example: 456
                amount:
                  type: integer
                  description: L'importo del rimborso.
                  example: 100
              required:
                - user_id
                - auction_id
                - amount
      responses:
        200:
          description: Rimborso processato con successo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Refund processed successfully"
        400:
          description: Dati di input non validi o campi mancanti.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid data"
        404:
          description: Utente non trovato o asta non esistente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        409:
          description: Il rimborso è già stato processato.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Refund already processed"
        500:
          description: Errore interno del server durante il processo di rimborso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Refund failed: <details of the error>"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT