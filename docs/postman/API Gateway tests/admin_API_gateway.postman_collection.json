{
	"info": {
		"_postman_id": "16bd455c-6527-4fa1-8686-0c913714a64d",
		"name": "GACHA - Admin API Gateway",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39569006"
	},
	"item": [
		{
			"name": "see_users_collections",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"admin_id = Math.floor(Math.random() * 3) + 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response header should contains Authorization field\", function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test('Each item contains an array', function () {\r",
							"    const jsonData = pm.response.json()\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('gachas').that.is.an('array');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should contain a gachas array with the required attributes\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        // Check user and gacha sub items\r",
							"        pm.expect(item).to.have.property('user_id').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('gachas').that.is.an('array');\r",
							"\r",
							"        // Per ogni gacha, verifica che abbia gli attributi richiesti\r",
							"        item.gachas.forEach((gacha) => {\r",
							"            pm.expect(gacha).to.have.property('gachaId').that.is.a('number');\r",
							"            pm.expect(gacha).to.have.property('idOwn').that.is.a('number');\r",
							"            pm.expect(gacha).to.have.property('image').that.is.a('string');\r",
							"            pm.expect(gacha).to.have.property('name').that.is.a('string');\r",
							"            pm.expect(gacha).to.have.property('rarity').that.is.a('string');\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        // Check rarity level for each gacha sub array\r",
							"        item.gachas.forEach((gacha) => {\r",
							"            pm.expect(allowedValues).to.include(gacha.rarity);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:8081/admin/collections",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"admin",
						"collections"
					]
				}
			},
			"response": []
		},
		{
			"name": "see_a_specific_user_collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"admin_id = Math.floor(Math.random() * 4) + 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"user_id = 7;\r",
							"\r",
							"// Add to env variables\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);\r",
							"pm.environment.set('user_id', user_id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response header should contains Authorization field\", function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should contain a gachas array with the required attributes\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('gachaId').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('idOwn').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('image').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('rarity').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(allowedValues).to.include(item.rarity);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:8081/admin/collections/5",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"admin",
						"collections",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_system_gacha",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item have some properties\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('image').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('rarity').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('extractionProb').that.is.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Probabilities are between 0 and 1\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item.extractionProb).is.within(0, 1);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(allowedValues).to.include(item.rarity);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:8081/system_collection",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"system_collection"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_a_specific_system_gacha",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"gacha_id = Math.floor(Math.random() * 36) + 1;\r",
							"\r",
							"pm.environment.set('gacha_id', gacha_id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not an array\", function() {\r",
							"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item has expected properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).not.to.be.an('array');\r",
							"\r",
							"    // Check properties\r",
							"    pm.expect(jsonData).to.have.property('id').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('name').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('extractionProb').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('rarity').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('image').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('damage').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('speed').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('critical').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('accuracy').that.is.a('number');\r",
							"});\r",
							"\r",
							"pm.test('Numeric values between 0 and 100', function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.damage).is.within(0, 100);\r",
							"    pm.expect(jsonData.speed).is.within(0, 100);\r",
							"    pm.expect(jsonData.damage).is.within(0, 100);\r",
							"    pm.expect(jsonData.accuracy).is.within(0, 100);\r",
							"});\r",
							"\r",
							"pm.test('Probabilities are between 0 and 1', function () {\r",
							"    pm.expect(pm.response.json().critical).to.be.within(0, 1);\r",
							"    pm.expect(pm.response.json().extractionProb).to.be.within(0, 1);\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(allowedValues).to.include(jsonData.rarity);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:8081/system_collection/{{gacha_id}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"system_collection",
						"{{gacha_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add_gacha_to_a_collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ADMIN\r",
							"admin_id = 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);\r",
							"\r",
							"// BODY\r",
							"user_id = Math.floor(Math.random() * 10) + 1;\r",
							"gacha_id = Math.floor(Math.random() * 36) + 1;\r",
							"\r",
							"pm.environment.set('user_id', user_id);\r",
							"pm.environment.set('gacha_id', gacha_id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed TypeError: pm.response is not a function\r",
							"pm.test('Response is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response is a JSON', function() {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not an array\", function() {\r",
							"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('Request contains Authorization', function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test('Request body contains elements', function () {\r",
							"    const body = pm.request.body.raw;\r",
							"    const jsonBody = JSON.parse(body);\r",
							"    pm.expect(jsonBody).to.have.property('user_id');\r",
							"    pm.expect(jsonBody).to.have.property('gacha_id');\r",
							"});\r",
							"\r",
							"pm.test('Response fields', function() {\r",
							"    pm.expect(pm.response.json()).to.have.property('success').that.is.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body matches expected result\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    var expectedResponse = \"Gacha \" + pm.environment.get('gacha_id') + \" added to user (id: \" + pm.environment.get('user_id') + \") collection\";\r",
							"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user_id\": {{user_id}},\r\n    \"gacha_id\": {{gacha_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:8081/admin/edit/collection",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"admin",
						"edit",
						"collection"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit_gacha_of_a_collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a user id\r",
							"//user_id = Math.floor(Math.random() * 15) + 1;\r",
							"// Chose a gacha from available gachas\r",
							"gacha_id = Math.floor(Math.random() * 36) + 1;\r",
							"// in_auction = 1;\r",
							"// Select a specific idOwn (actually there are 37 rows)\r",
							"idOwn = 3 /*Math.floor(Math.random() * 37) + 1;*/\r",
							"\r",
							"// Save variables\r",
							"pm.environment.set('id', idOwn);\r",
							"//pm.environment.set('user_id', user_id);\r",
							"pm.environment.set('gacha_id', gacha_id);\r",
							"\r",
							"// ADMIN\r",
							"admin_id = 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response is a JSON', function() {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not an array\", function() {\r",
							"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('Request contains Authorization', function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test('Request body contains elements', function () {\r",
							"    const body = pm.request.body.raw;\r",
							"    const jsonBody = JSON.parse(body);\r",
							"    pm.expect(jsonBody).to.have.property('user_id');\r",
							"    pm.expect(jsonBody).to.have.property('gacha_id');\r",
							"});\r",
							"\r",
							"pm.test('Response fields', function() {\r",
							"    pm.expect(pm.response.json()).to.have.property('success').that.is.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body matches expected result\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    var expectedResponse = \"Row n. \" + pm.environment.get('id') + \" updated\";\r",
							"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    //\"user_id\": {{user_id}},\r\n    \"gacha_id\": {{gacha_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:8081/admin/edit/collection",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"admin",
						"edit",
						"collection"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_gacha_from_collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"id_own = 3;\r",
							"pm.environment.set('id', id_own);\r",
							"\r",
							"// ADMIN\r",
							"admin_id = 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response is a JSON', function() {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not an array\", function() {\r",
							"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('Request contains Authorization', function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test('Response fields', function() {\r",
							"    pm.expect(pm.response.json()).to.have.property('success').that.is.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body matches expected result\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    var expectedResponse = \"Row (id: \" + pm.environment.get('id') + \") deleted\";\r",
							"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:8081/admin/edit/collection/{{id}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"admin",
						"edit",
						"collection",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add_system_gacha",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"admin_id = 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response is a JSON', function() {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"pm.test('Request contains Authorization', function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"/*pm.test('Request body contains elements', function () {\r",
							"    const body = pm.request.body.raw;\r",
							"    const jsonBody = JSON.parse(body);\r",
							"\r",
							"    pm.expect(jsonBody).to.have.property('name').that.is.a('string');\r",
							"    pm.expect(jsonBody).to.have.property('extractionProb').that.is.a('number');\r",
							"    pm.expect(jsonBody).to.have.property('rarity').that.is.a('string');\r",
							"    pm.expect(jsonBody).to.have.property('image').that.is.a('string');\r",
							"    pm.expect(jsonBody).to.have.property('damage').that.is.a('number');\r",
							"    pm.expect(jsonBody).to.have.property('speed').that.is.a('number');\r",
							"    pm.expect(jsonBody).to.have.property('critical').that.is.a('number');\r",
							"    pm.expect(jsonBody).to.have.property('accuracy').that.is.a('number');\r",
							"});*/\r",
							"\r",
							"/*pm.test(\"Response body matches expected result\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    n = 0;\r",
							"    if (Array.isArray(pm.response.json())) {\r",
							"        pm.response.json().forEach((item) => {\r",
							"            n += 1;\r",
							"        })\r",
							"    } else n = 1;\r",
							"    var expectedResponse = \"Added \" + n + \" new gachas\";\r",
							"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
							"});*/\r",
							"\r",
							"/*pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});*/\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"name\": \"Amity Accord\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Amity%20Accord.png\",\r\n        \"damage\": 19,\r\n        \"speed\": 19,\r\n        \"critical\": 0.013483205828622311,\r\n        \"accuracy\": 57\r\n    },\r\n    {\r\n        \"name\": \"Augment\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Augment.png\",\r\n        \"damage\": 14,\r\n        \"speed\": 30,\r\n        \"critical\": 0.03864243103590715,\r\n        \"accuracy\": 51\r\n    },\r\n    {\r\n        \"name\": \"Cadenza\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Cadenza.png\",\r\n        \"damage\": 20,\r\n        \"speed\": 17,\r\n        \"critical\": 0.040968433639838035,\r\n        \"accuracy\": 59\r\n    },\r\n    {\r\n        \"name\": \"Celestial Spiral\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Celestial%20Spiral.png\",\r\n        \"damage\": 30,\r\n        \"speed\": 27,\r\n        \"critical\": 0.030582009733648254,\r\n        \"accuracy\": 57\r\n    },\r\n    {\r\n        \"name\": \"Comet Flare\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Comet%20Flare.png\",\r\n        \"damage\": 27,\r\n        \"speed\": 28,\r\n        \"critical\": 0.045415052258600985,\r\n        \"accuracy\": 56\r\n    },\r\n    {\r\n        \"name\": \"Fusion Accreation\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Fusion%20Accreation.png\",\r\n        \"damage\": 25,\r\n        \"speed\": 12,\r\n        \"critical\": 0.022285235964196425,\r\n        \"accuracy\": 50\r\n    },\r\n    {\r\n        \"name\": \"Gauntlets 21D\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Gauntlets%2021D.png\",\r\n        \"damage\": 12,\r\n        \"speed\": 29,\r\n        \"critical\": 0.04560532453068797,\r\n        \"accuracy\": 56\r\n    },\r\n    {\r\n        \"name\": \"Hollow Mirage\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Hollow%20Mirage.png\",\r\n        \"damage\": 20,\r\n        \"speed\": 28,\r\n        \"critical\": 0.032496558334091,\r\n        \"accuracy\": 51\r\n    },\r\n    {\r\n        \"name\": \"Jinzhou Keeper\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Jinzhou%20Keeper.png\",\r\n        \"damage\": 24,\r\n        \"speed\": 13,\r\n        \"critical\": 0.012864096340998245,\r\n        \"accuracy\": 58\r\n    },\r\n    {\r\n        \"name\": \"Marcato\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Marcato.png\",\r\n        \"damage\": 27,\r\n        \"speed\": 10,\r\n        \"critical\": 0.02513917190200654,\r\n        \"accuracy\": 53\r\n    },\r\n    {\r\n        \"name\": \"Novaburst\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Novaburst.png\",\r\n        \"damage\": 21,\r\n        \"speed\": 26,\r\n        \"critical\": 0.017614106767245084,\r\n        \"accuracy\": 58\r\n    },\r\n    {\r\n        \"name\": \"Pistol 26\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Pistol%2026.png\",\r\n        \"damage\": 25,\r\n        \"speed\": 19,\r\n        \"critical\": 0.014828799655798237,\r\n        \"accuracy\": 59\r\n    },\r\n    {\r\n        \"name\": \"Rectifier 25\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Rectifier%2025.png\",\r\n        \"damage\": 18,\r\n        \"speed\": 18,\r\n        \"critical\": 0.026264088696232715,\r\n        \"accuracy\": 56\r\n    },\r\n    {\r\n        \"name\": \"Relativistic Jet\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Relativistic%20Jet.png\",\r\n        \"damage\": 27,\r\n        \"speed\": 28,\r\n        \"critical\": 0.024477321284145835,\r\n        \"accuracy\": 53\r\n    },\r\n    {\r\n        \"name\": \"Stonard\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Stonard.png\",\r\n        \"damage\": 11,\r\n        \"speed\": 31,\r\n        \"critical\": 0.042055974958484704,\r\n        \"accuracy\": 56\r\n    },\r\n    {\r\n        \"name\": \"Thunderbolt\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Thunderbolt.png\",\r\n        \"damage\": 20,\r\n        \"speed\": 17,\r\n        \"critical\": 0.013224090060177187,\r\n        \"accuracy\": 59\r\n    },\r\n    {\r\n        \"name\": \"Undying Flame\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Undying%20Flame.png\",\r\n        \"damage\": 27,\r\n        \"speed\": 22,\r\n        \"critical\": 0.028315136867233276,\r\n        \"accuracy\": 61\r\n    },\r\n    {\r\n        \"name\": \"Variation\",\r\n        \"extractionProb\": 0.5445,\r\n        \"rarity\": \"Common\",\r\n        \"image\": \"http://localhost/resources/common/Variation.png\",\r\n        \"damage\": 19,\r\n        \"speed\": 10,\r\n        \"critical\": 0.010205191320624044,\r\n        \"accuracy\": 57\r\n    },\r\n    {\r\n        \"name\": \"Gauntlets of Night\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Gauntlets%20of%20Night.png\",\r\n        \"damage\": 43,\r\n        \"speed\": 35,\r\n        \"critical\": 0.08697056171708888,\r\n        \"accuracy\": 61\r\n    },\r\n    {\r\n        \"name\": \"Gauntlets of Voyager\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Gauntlets%20of%20Voyager.png\",\r\n        \"damage\": 47,\r\n        \"speed\": 51,\r\n        \"critical\": 0.0907106718967258,\r\n        \"accuracy\": 60\r\n    },\r\n    {\r\n        \"name\": \"Guardian Gauntlets\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Guardian%20Gauntlets.png\",\r\n        \"damage\": 40,\r\n        \"speed\": 30,\r\n        \"critical\": 0.052925191212243115,\r\n        \"accuracy\": 67\r\n    },\r\n    {\r\n        \"name\": \"Guardian Pistol\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Guardian%20Pistol.png\",\r\n        \"damage\": 48,\r\n        \"speed\": 38,\r\n        \"critical\": 0.07583253228609549,\r\n        \"accuracy\": 61\r\n    },\r\n    {\r\n        \"name\": \"Guardian Rectifier\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Guardian%20Rectifier.png\",\r\n        \"damage\": 38,\r\n        \"speed\": 31,\r\n        \"critical\": 0.08476968557648848,\r\n        \"accuracy\": 64\r\n    },\r\n    {\r\n        \"name\": \"Originite Type III\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Originite%20Type%20III.png\",\r\n        \"damage\": 50,\r\n        \"speed\": 47,\r\n        \"critical\": 0.06583387927226672,\r\n        \"accuracy\": 63\r\n    },\r\n    {\r\n        \"name\": \"Originite Type IV\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Originite%20Type%20IV.png\",\r\n        \"damage\": 32,\r\n        \"speed\": 37,\r\n        \"critical\": 0.05474837186323628,\r\n        \"accuracy\": 64\r\n    },\r\n    {\r\n        \"name\": \"Originite Type V\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Originite%20Type%20V.png\",\r\n        \"damage\": 49,\r\n        \"speed\": 31,\r\n        \"critical\": 0.09149524410637416,\r\n        \"accuracy\": 61\r\n    },\r\n    {\r\n        \"name\": \"Pistol of Night\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Pistol%20of%20Night.png\",\r\n        \"damage\": 49,\r\n        \"speed\": 31,\r\n        \"critical\": 0.07859293879368502,\r\n        \"accuracy\": 61\r\n    },\r\n    {\r\n        \"name\": \"Pistol of Voyager\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Pistol%20of%20Voyager.png\",\r\n        \"damage\": 34,\r\n        \"speed\": 45,\r\n        \"critical\": 0.07177654763465456,\r\n        \"accuracy\": 61\r\n    },\r\n    {\r\n        \"name\": \"Rectifier of Night\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Rectifier%20of%20Night.png\",\r\n        \"damage\": 44,\r\n        \"speed\": 49,\r\n        \"critical\": 0.0633192534899428,\r\n        \"accuracy\": 66\r\n    },\r\n    {\r\n        \"name\": \"Rectifier of Voyager\",\r\n        \"extractionProb\": 0.4,\r\n        \"rarity\": \"Rare\",\r\n        \"image\": \"http://localhost/resources/rare/Rectifier%20of%20Voyager.png\",\r\n        \"damage\": 40,\r\n        \"speed\": 35,\r\n        \"critical\": 0.07500405757380874,\r\n        \"accuracy\": 67\r\n    },\r\n    {\r\n        \"name\": \"Tyro Gauntlets\",\r\n        \"extractionProb\": 0.05,\r\n        \"rarity\": \"Super Rare\",\r\n        \"image\": \"http://localhost/resources/super_rare/Tyro%20Gauntlets.png\",\r\n        \"damage\": 71,\r\n        \"speed\": 52,\r\n        \"critical\": 0.116963913030454,\r\n        \"accuracy\": 72\r\n    },\r\n    {\r\n        \"name\": \"Tyro Pistol\",\r\n        \"extractionProb\": 0.05,\r\n        \"rarity\": \"Super Rare\",\r\n        \"image\": \"http://localhost/resources/super_rare/Tyro%20Pistol.png\",\r\n        \"damage\": 60,\r\n        \"speed\": 69,\r\n        \"critical\": 0.12154957107023734,\r\n        \"accuracy\": 82\r\n    },\r\n    {\r\n        \"name\": \"Tyro Rectifier\",\r\n        \"extractionProb\": 0.05,\r\n        \"rarity\": \"Super Rare\",\r\n        \"image\": \"http://localhost/resources/super_rare/Tyro%20Rectifier.png\",\r\n        \"damage\": 68,\r\n        \"speed\": 65,\r\n        \"critical\": 0.11612537907792658,\r\n        \"accuracy\": 74\r\n    },\r\n    {\r\n        \"name\": \"Ultra Gauntlets\",\r\n        \"extractionProb\": 0.005,\r\n        \"rarity\": \"Ultra Rare\",\r\n        \"image\": \"http://localhost/resources/ultra_rare/Ultra%20Gauntlets.png\",\r\n        \"damage\": 72,\r\n        \"speed\": 79,\r\n        \"critical\": 0.1537302730104312,\r\n        \"accuracy\": 88\r\n    },\r\n    {\r\n        \"name\": \"Ultra pistol\",\r\n        \"extractionProb\": 0.005,\r\n        \"rarity\": \"Ultra Rare\",\r\n        \"image\": \"http://localhost/resources/ultra_rare/Ultra%20pistol.png\",\r\n        \"damage\": 89,\r\n        \"speed\": 78,\r\n        \"critical\": 0.18298191589381502,\r\n        \"accuracy\": 86\r\n    },\r\n    {\r\n        \"name\": \"Static Mist\",\r\n        \"extractionProb\": 0.0005,\r\n        \"rarity\": \"Super Ultra Rare\",\r\n        \"image\": \"http://localhost/resources/super_ultra_rare/Static%20Mist.png\",\r\n        \"damage\": 100,\r\n        \"speed\": 96,\r\n        \"critical\": 0.2595070634327134,\r\n        \"accuracy\": 100\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:8081/admin/edit/gacha",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"admin",
						"edit",
						"gacha"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit_system_gacha",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"admin_id = 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);\r",
							"\r",
							"// Gacha\r",
							"gacha_id = 36;\r",
							"pm.environment.set('gacha_id', gacha_id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response is a JSON', function() {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"pm.test('Request body is not an array', function() {\r",
							"    const jsonBody = JSON.parse(pm.request.body.raw);\r",
							"    pm.expect(jsonBody).not.to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test('Request contains Authorization', function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body matches expected result\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    var expectedResponse = \"Gacha (id: \" + pm.environment.get('gacha_id') + \") updated\";\r",
							"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{gacha_id}},\r\n    //\"name\": \"try_patch\",\r\n    //\"rarity\": \"Super Ultra Rare\",\r\n    \"extractionProb\": 0.0001\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:8081/admin/edit/gacha",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"admin",
						"edit",
						"gacha"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_system_gacha",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"gacha_id = 36;\r",
							"pm.environment.set('gacha_id', gacha_id);\r",
							"\r",
							"// ADMIN\r",
							"admin_id = 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Response is a JSON', function() {\r",
							"    pm.response.to.have.header('Content-Type', 'application/json');\r",
							"});\r",
							"\r",
							"pm.test('Request contains Authorization', function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test('Response contains field', function() {\r",
							"    pm.expect(pm.response.json()).to.have.property('success');\r",
							"})\r",
							"\r",
							"pm.test(\"Response body matches expected result\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    var expectedResponse = \"Gacha (id: \" + pm.environment.get('gacha_id') + \") deleted from the system\";\r",
							"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:8081/admin/edit/gacha/{{gacha_id}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"admin",
						"edit",
						"gacha",
						"{{gacha_id}}"
					]
				}
			},
			"response": []
		}
	]
}