{
	"info": {
		"_postman_id": "20030d9d-193b-475f-8f72-cbce303b0b9c",
		"name": "Account_Management_mock_tests_(Admin) Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39573357"
	},
	"item": [
		{
			"name": "login OK (200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 500]);",
							"});",
							"",
							"// Test credenziali valide",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Login successful\", function () {",
							"        pm.expect(jsonData).to.have.property(\"access_token\");",
							"        pm.expect(jsonData).to.have.property(\"message\");",
							"    });",
							"}",
							"",
							"// Test credenziali non valide",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Missing credentials\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"username and password are required\");",
							"    });",
							"}",
							"",
							"// Test credenziali non valide",
							"if (pm.response.code === 401) {",
							"    pm.test(\"Invalid credentials\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Invalid credentials\");",
							"    });",
							"}",
							"",
							"// Test errori del database",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Database Error\");",
							"    });",
							"}",
							"",
							"// Test fallimento connessione a DB Manager",
							"if (jsonData.error === \"Failed to connect to DB Manager\") {",
							"    pm.test(\"Failed to connect to DB Manager\", function () {",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"admin1\",\r\n    \"password\":\"admin1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5000/account_management/admin/login",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login ERROR (400 Missing Argument)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401, 500]);",
							"});",
							"",
							"// Test credenziali valide",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Login successful\", function () {",
							"        pm.expect(jsonData).to.have.property(\"access_token\");",
							"        pm.expect(jsonData).to.have.property(\"status\", \"Login completed successfully\");",
							"    });",
							"}",
							"",
							"// Test credenziali non valide",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Missing credentials\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"username and password are required\");",
							"    });",
							"}",
							"",
							"// Test credenziali non valide",
							"if (pm.response.code === 401) {",
							"    pm.test(\"Invalid credentials\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Invalid credentials\");",
							"    });",
							"}",
							"",
							"// Test errori del database",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Database Error\");",
							"    });",
							"}",
							"",
							"// Test fallimento connessione a DB Manager",
							"if (jsonData.error === \"Failed to connect to DB Manager\") {",
							"    pm.test(\"Failed to connect to DB Manager\", function () {",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"{{username}}\",\r\n    \"password\":\"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5000/account_management/admin/login",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "view_specific_user OK (200)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Genera un numero casuale tra 1 e 10",
							"const randomNumber = Math.floor(Math.random() * 10) + 1;",
							"const username = `user${randomNumber}`;",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('username', username);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"console.log(\"Username:\", username);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404, 500]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"User data retrieved successfully\", function () {",
							"        pm.expect(jsonData).to.exist;",
							"    });",
							"}",
							"",
							"// Test utente non trovato (404 Not Found)",
							"if (pm.response.code === 404) {",
							"    pm.test(\"User not found\", function () {",
							"        pm.expect(jsonData).to.be.null; // La risposta Ã¨ `null` per un utente non trovato",
							"    });",
							"}",
							"",
							"// Test non autorizzato (403 Forbidden)",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized access\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Test errore connessione al DB Manager (500 Internal Server Error)",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Failed to connect to DB Manager\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Failed to connect to DB Manager\");",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							"",
							"// Test errore generico del database (500 Internal Server Error)",
							"if (jsonData.error === \"Database error\") {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"1\",\r\n    \"username\": \"admin1\",\r\n    \"role\": \"admin\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5000/account_management/admin/view_users?username={{username}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"view_users"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "view_specific_user ERROR (403 Unauthorized)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Genera un numero casuale tra 1 e 10",
							"//const randomNumber = Math.floor(Math.random() * 10) + 1;",
							"const username = \"wrongusername\";",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('username', username);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"console.log(\"Username:\", username);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404, 500]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"User data retrieved successfully\", function () {",
							"        pm.expect(jsonData).to.exist;",
							"    });",
							"}",
							"",
							"// Test utente non trovato (404 Not Found)",
							"if (pm.response.code === 404) {",
							"    pm.test(\"User not found\", function () {",
							"        pm.expect(jsonData.status).to.have.property(\"error\");",
							"    });",
							"}",
							"",
							"// Test non autorizzato (403 Forbidden)",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized access\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Test errore connessione al DB Manager (500 Internal Server Error)",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Failed to connect to DB Manager\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Failed to connect to DB Manager\");",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							"",
							"// Test errore generico del database (500 Internal Server Error)",
							"if (jsonData.error === \"Database error\") {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"1\",\r\n    \"username\": \"admin1\",\r\n    \"role\": \"wrongrole\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5000/account_management/admin/view_users?username={{username}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"view_users"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "view_all_users OK (200)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Genera un numero casuale tra 1 e 10",
							"const username = \"all\";",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('username', username);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"console.log(\"Username:\", username);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404, 500]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"User data retrieved successfully\", function () {",
							"        pm.expect(jsonData).to.exist;",
							"    });",
							"}",
							"",
							"// Test utente non trovato (404 Not Found)",
							"if (pm.response.code === 404) {",
							"    pm.test(\"User not found\", function () {",
							"        pm.expect(jsonData).to.be.null; // La risposta Ã¨ `null` per un utente non trovato",
							"    });",
							"}",
							"",
							"// Test non autorizzato (403 Forbidden)",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized access\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Test errore connessione al DB Manager (500 Internal Server Error)",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Failed to connect to DB Manager\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Failed to connect to DB Manager\");",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							"",
							"// Test errore generico del database (500 Internal Server Error)",
							"if (jsonData.error === \"Database error\") {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"1\",\r\n    \"username\": \"admin1\",\r\n    \"role\": \"admin\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5000/account_management/admin/view_users?username={{username}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"view_users"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "view_all_users ERROR (403 Unauthorized)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Genera un numero casuale tra 1 e 10",
							"const username = \"all\";",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('username', username);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"console.log(\"Username:\", username);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404, 500]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"User data retrieved successfully\", function () {",
							"        pm.expect(jsonData).to.exist;",
							"    });",
							"}",
							"",
							"// Test utente non trovato (404 Not Found)",
							"if (pm.response.code === 404) {",
							"    pm.test(\"User not found\", function () {",
							"        pm.expect(jsonData).to.be.null; // La risposta Ã¨ `null` per un utente non trovato",
							"    });",
							"}",
							"",
							"// Test non autorizzato (403 Forbidden)",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized access\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Test errore connessione al DB Manager (500 Internal Server Error)",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Failed to connect to DB Manager\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Failed to connect to DB Manager\");",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							"",
							"// Test errore generico del database (500 Internal Server Error)",
							"if (jsonData.error === \"Database error\") {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"1\",\r\n    \"username\": \"admin1\",\r\n    \"role\": \"wrongrole\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5000/account_management/admin/view_users?username={{username}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"view_users"
					],
					"query": [
						{
							"key": "username",
							"value": "{{username}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "modify_user OK (200)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Genera un numero casuale tra 1 e 10",
							"const randomNumber = Math.floor(Math.random() * 10) + 1;",
							"// Costruisce il nome utente",
							"const username = `user${randomNumber}`;",
							"//genero una new_currency random fra 10 e 2000",
							"const new_currency = Math.floor(Math.random() * (2000 - 10 + 1)) + 10;",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('username', username);",
							"pm.environment.set('new_currency', new_currency);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"// Log dei valori generati (utile per debug)",
							"console.log(\"Username:\", username);",
							"console.log(\"New Currency:\", new_currency);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403, 500]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Currency modified successfully\", function () {",
							"        pm.expect(jsonData).to.have.property(\"message\");",
							"        pm.expect(jsonData.message).to.include(\"Currency modified successfully\");",
							"    });",
							"}",
							"",
							"// Test input mancante o errato (400 Bad Request)",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Missing or invalid input\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\").that.is.oneOf([",
							"            \"username and new_currency are required\",",
							"            \"'new_currency' must be an integer\"",
							"        ]);",
							"    });",
							"}",
							"",
							"// Test non autorizzato (403 Forbidden)",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized access\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Test errore connessione al DB Manager (500 Internal Server Error)",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Failed to connect to DB Manager\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Failed to connect to DB Manager\");",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							"",
							"// Test errore generico del database (500 Internal Server Error)",
							"if (jsonData.error === \"Database error\") {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"1\",\r\n    \"username\": \"admin1\",\r\n    \"role\": \"admin\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"new_currency\": {{new_currency}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5000/account_management/admin/modify_user",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"modify_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "modify_user ERROR (400 Bad Request)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Genera un numero casuale tra 1 e 10",
							"const randomNumber = Math.floor(Math.random() * 10) + 1;",
							"// Costruisce il nome utente",
							"const username = `user${randomNumber}`;",
							"//genero una new_currency random fra 10 e 2000",
							"//const new_currency = Math.floor(Math.random() * (2000 - 10 + 1)) + 10;",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('username', username);",
							"//pm.environment.set('new_currency', new_currency);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"// Log dei valori generati (utile per debug)",
							"console.log(\"Username:\", username);",
							"//console.log(\"New Currency:\", new_currency);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403, 500]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Currency modified successfully\", function () {",
							"        pm.expect(jsonData).to.have.property(\"message\");",
							"        pm.expect(jsonData.message).to.include(\"Currency modified successfully\");",
							"    });",
							"}",
							"",
							"// Test input mancante o errato (400 Bad Request)",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Missing or invalid input\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\").that.is.oneOf([",
							"            \"username and new_currency are required\",",
							"            \"'new_currency' must be an integer\"",
							"        ]);",
							"    });",
							"}",
							"",
							"// Test non autorizzato (403 Forbidden)",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized access\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Test errore connessione al DB Manager (500 Internal Server Error)",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Failed to connect to DB Manager\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Failed to connect to DB Manager\");",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							"",
							"// Test errore generico del database (500 Internal Server Error)",
							"if (jsonData.error === \"Database error\") {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"1\",\r\n    \"username\": \"admin1\",\r\n    \"role\": \"admin\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"new_currency\": \"wrongcurrency\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5000/account_management/admin/modify_user",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"modify_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "check_payments_history OK (200)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Genera un numero casuale tra 1 e 10",
							"const randomNumber = Math.floor(Math.random() * 10) + 1;",
							"const username = `user${randomNumber}`;",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('username', username);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"// Log dei valori generati (utile per debug)",
							"console.log(\"Username:\", username);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403, 404, 500]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Payment history retrieved successfully\", function () {",
							"    });",
							"}",
							"",
							"// Test input mancante (400 Bad Request)",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Username required error\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Username is required\");",
							"    });",
							"}",
							"",
							"// Test non autorizzato (403 Forbidden)",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized access\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Test utente non trovato o transazioni assenti (404 Not Found)",
							"if (pm.response.code === 404) {",
							"    pm.test(\"User not found or no transactions\", function () {",
							"        pm.expect(jsonData.status).to.have.property(\"message\");",
							"    });",
							"}",
							"",
							"// Test errore del database (500 Internal Server Error)",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Database error\")",
							"            .or.to.have.property(\"error\", \"Failed to connect to DB Manager\");",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"1\",\r\n    \"username\": \"admin1\",\r\n    \"role\": \"admin\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5000/account_management/admin/check_payments_history/{{username}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"check_payments_history",
						"{{username}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "check_payments_history ERROR (403 Unauthorized)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Genera un numero casuale tra 1 e 10",
							"const randomNumber = Math.floor(Math.random() * 10) + 1;",
							"const username = \"wrongusername\";",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('username', username);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"// Log dei valori generati (utile per debug)",
							"console.log(\"Username:\", username);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403, 404, 500]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Payment history retrieved successfully\", function () {",
							"    });",
							"}",
							"",
							"// Test input mancante (400 Bad Request)",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Username required error\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Username is required\");",
							"    });",
							"}",
							"",
							"// Test non autorizzato (403 Forbidden)",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized access\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Test utente non trovato o transazioni assenti (404 Not Found)",
							"if (pm.response.code === 404) {",
							"    pm.test(\"User not found or no transactions\", function () {",
							"        pm.expect(jsonData.status).to.have.property(\"message\");",
							"    });",
							"}",
							"",
							"// Test errore del database (500 Internal Server Error)",
							"if (pm.response.code === 500) {",
							"    pm.test(\"Database error handled\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"Database error\")",
							"            .or.to.have.property(\"error\", \"Failed to connect to DB Manager\");",
							"        pm.expect(jsonData).to.have.property(\"details\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"1\",\r\n    \"username\": \"admin1\",\r\n    \"role\": \"wrongrole\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5000/account_management/admin/check_payments_history/{{username}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"admin",
						"check_payments_history",
						"{{username}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout OK (200)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Costruisce il nome utente",
							"const username = \"admin1\";",
							"const user_id = \"1\";",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('user_id', user_id.toString());",
							"pm.environment.set('username', username);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"// Log dei valori generati (utile per debug)",
							"console.log(\"Username:\", username);",
							"console.log(\"User ID:\", user_id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Logout successful\", function () {",
							"        pm.expect(jsonData).to.have.property(\"message\");",
							"        pm.expect(jsonData.message).to.match(/logged out, token revoked\\./);",
							"    });",
							"}",
							"",
							"// Test richiesta incompleta (400 Bad Request)",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Missing username\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"username is required\");",
							"    });",
							"}",
							"",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized logout attempt\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\");",
							"        pm.expect(jsonData.error).to.include(\"Unauthorized\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"{{user_id}}\",\r\n    \"username\": \"{{username}}\",\r\n    \"role\": \"admin\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"{{username}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5000/account_management/logout",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout ERROR (403 Unauthorized)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Costruisce il nome utente",
							"const username = \"admin1\";",
							"const user_id = \"1\";",
							"const iat = Math.floor(Date.now() / 1000);",
							"const jti = CryptoJS.lib.WordArray.random(16).toString(); // Genera un identificatore unico",
							"",
							"",
							"// Salva i dati nel contesto di Postman",
							"pm.environment.set('user_id', user_id.toString());",
							"pm.environment.set('username', username);",
							"pm.environment.set('iat', iat);",
							"pm.environment.set('jti', jti);",
							"",
							"// Log dei valori generati (utile per debug)",
							"console.log(\"Username:\", username);",
							"console.log(\"User ID:\", user_id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"// Test codice di stato",
							"pm.test(\"Status code is correct\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403]);",
							"});",
							"",
							"// Test successo (200 OK)",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Logout successful\", function () {",
							"        pm.expect(jsonData).to.have.property(\"message\");",
							"        pm.expect(jsonData.message).to.match(/logged out, token revoked\\./);",
							"    });",
							"}",
							"",
							"// Test richiesta incompleta (400 Bad Request)",
							"if (pm.response.code === 400) {",
							"    pm.test(\"Missing username\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\", \"username is required\");",
							"    });",
							"}",
							"",
							"if (pm.response.code === 403) {",
							"    pm.test(\"Unauthorized logout attempt\", function () {",
							"        pm.expect(jsonData).to.have.property(\"error\");",
							"        pm.expect(jsonData.error).to.include(\"Unauthorized\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\":\"{{user_id}}\",\r\n    \"username\": \"wrongusername\",\r\n    \"role\": \"admin\",\r\n    \"jti\": \"{{jti}}\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"{{username}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5000/account_management/logout",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"account_management",
						"logout"
					]
				}
			},
			"response": []
		}
	]
}