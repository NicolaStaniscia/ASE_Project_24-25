{
	"info": {
		"_postman_id": "58350f2e-9d87-4b6c-979f-12db8905faee",
		"name": "Collection_Integrazione",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39662462"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "see_users_collections",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"admin_id = 1\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('admin_id', admin_id.toString());\r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response header should contains Authorization field\", function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test('Each item contains an array', function () {\r",
									"    const jsonData = pm.response.json()\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item).to.have.property('gachas').that.is.an('array');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each item should contain a gachas array with the required attributes\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        // Check user and gacha sub items\r",
									"        pm.expect(item).to.have.property('user_id').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('gachas').that.is.an('array');\r",
									"\r",
									"        // Per ogni gacha, verifica che abbia gli attributi richiesti\r",
									"        item.gachas.forEach((gacha) => {\r",
									"            pm.expect(gacha).to.have.property('gachaId').that.is.a('number');\r",
									"            pm.expect(gacha).to.have.property('idOwn').that.is.a('number');\r",
									"            pm.expect(gacha).to.have.property('image').that.is.a('string');\r",
									"            pm.expect(gacha).to.have.property('name').that.is.a('string');\r",
									"            pm.expect(gacha).to.have.property('rarity').that.is.a('string');\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed rarity values\", function () {\r",
									"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        // Check rarity level for each gacha sub array\r",
									"        item.gachas.forEach((gacha) => {\r",
									"            pm.expect(allowedValues).to.include(gacha.rarity);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:8081/admin/collections",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"admin",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "see_a_specific_user_collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"admin_id = 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"user_id = Math.floor(Math.random() * 10) + 1;\r",
									"\r",
									"// Add to env variables\r",
									"pm.environment.set('admin_id', admin_id.toString());\r",
									"pm.environment.set('iat', iat);\r",
									"pm.environment.set('user_id', user_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response header should contains Authorization field\", function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item should contain a gachas array with the required attributes\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item).to.have.property('gachaId').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('idOwn').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('image').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('rarity').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed rarity values\", function () {\r",
									"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(allowedValues).to.include(item.rarity);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:8081/admin/collections/{{user_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"admin",
								"collections",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_system_gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item have some properties\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('image').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('rarity').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('extractionProb').that.is.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Probabilities are between 0 and 1\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item.extractionProb).is.within(0, 1);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed rarity values\", function () {\r",
									"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(allowedValues).to.include(item.rarity);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:8081/system_collection",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"system_collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_a_specific_system_gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"gacha_id = Math.floor(Math.random() * 36) + 1;\r",
									"\r",
									"pm.environment.set('gacha_id', gacha_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an array\", function() {\r",
									"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.be.an('array');\r",
									"\r",
									"    // Check properties\r",
									"    pm.expect(jsonData).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('extractionProb').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('rarity').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('image').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('damage').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('speed').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('critical').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('accuracy').that.is.a('number');\r",
									"});\r",
									"\r",
									"pm.test('Numeric values between 0 and 100', function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.damage).is.within(0, 100);\r",
									"    pm.expect(jsonData.speed).is.within(0, 100);\r",
									"    pm.expect(jsonData.damage).is.within(0, 100);\r",
									"    pm.expect(jsonData.accuracy).is.within(0, 100);\r",
									"});\r",
									"\r",
									"pm.test('Probabilities are between 0 and 1', function () {\r",
									"    pm.expect(pm.response.json().critical).to.be.within(0, 1);\r",
									"    pm.expect(pm.response.json().extractionProb).to.be.within(0, 1);\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed rarity values\", function () {\r",
									"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(allowedValues).to.include(jsonData.rarity);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:8081/system_collection/{{gacha_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"system_collection",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add_gacha_to_a_collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// ADMIN\r",
									"admin_id = 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('admin_id', admin_id.toString());\r",
									"pm.environment.set('iat', iat);\r",
									"\r",
									"// BODY\r",
									"user_id = Math.floor(Math.random() * 10) + 1;\r",
									"gacha_id = Math.floor(Math.random() * 36) + 1;\r",
									"\r",
									"pm.environment.set('user_id', user_id);\r",
									"pm.environment.set('gacha_id', gacha_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed TypeError: pm.response is not a function\r",
									"pm.test('Response is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is a JSON', function() {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an array\", function() {\r",
									"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test('Request contains Authorization', function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test('Request body contains elements', function () {\r",
									"    const body = pm.request.body.raw;\r",
									"    const jsonBody = JSON.parse(body);\r",
									"    pm.expect(jsonBody).to.have.property('user_id');\r",
									"    pm.expect(jsonBody).to.have.property('gacha_id');\r",
									"});\r",
									"\r",
									"pm.test('Response fields', function() {\r",
									"    pm.expect(pm.response.json()).to.have.property('success').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body matches expected result\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var expectedResponse = \"Gacha \" + pm.environment.get('gacha_id') + \" added to user (id: \" + pm.environment.get('user_id') + \") collection\";\r",
									"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\": {{user_id}},\r\n    \"gacha_id\": {{gacha_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8081/admin/edit/collection",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"admin",
								"edit",
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_gacha_of_a_collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a user id\r",
									"user_id = Math.floor(Math.random() * 10) + 1;\r",
									"// Chose a gacha from available gachas\r",
									"gacha_id = Math.floor(Math.random() * 36) + 1;\r",
									"// in_auction = 1;\r",
									"// Select a specific idOwn (actually there are 37 rows)\r",
									"idOwn = Math.floor(Math.random() * 37) + 1;\r",
									"\r",
									"// Save variables\r",
									"pm.environment.set('id', idOwn);\r",
									"pm.environment.set('user_id', user_id);\r",
									"pm.environment.set('gacha_id', gacha_id);\r",
									"\r",
									"// ADMIN\r",
									"admin_id = 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('admin_id', admin_id.toString());\r",
									"pm.environment.set('iat', iat);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is a JSON', function() {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an array\", function() {\r",
									"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test('Request contains Authorization', function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test('Request body contains elements', function () {\r",
									"    const body = pm.request.body.raw;\r",
									"    const jsonBody = JSON.parse(body);\r",
									"    pm.expect(jsonBody).to.have.property('user_id');\r",
									"    pm.expect(jsonBody).to.have.property('gacha_id');\r",
									"});\r",
									"\r",
									"pm.test('Response fields', function() {\r",
									"    pm.expect(pm.response.json()).to.have.property('success').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body matches expected result\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var expectedResponse = \"Row n. \" + pm.environment.get('id') + \" updated\";\r",
									"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{id}},\r\n    \"user_id\": {{user_id}},\r\n    \"gacha_id\": {{gacha_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8081/admin/edit/collection",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"admin",
								"edit",
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_gacha_from_collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"id_own = 37;\r",
									"pm.environment.set('id', id_own);\r",
									"\r",
									"// ADMIN\r",
									"admin_id = 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('admin_id', admin_id.toString());\r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is a JSON', function() {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an array\", function() {\r",
									"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test('Request contains Authorization', function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test('Response fields', function() {\r",
									"    pm.expect(pm.response.json()).to.have.property('success').that.is.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body matches expected result\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var expectedResponse = \"Row (id: \" + pm.environment.get('id') + \") deleted\";\r",
									"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8081/admin/edit/collection/{{id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"admin",
								"edit",
								"collection",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add_system_gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"admin_id = 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('admin_id', admin_id.toString());\r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is a JSON', function() {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json');\r",
									"});\r",
									"\r",
									"pm.test('Request contains Authorization', function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test('Request body contains elements', function () {\r",
									"    const body = pm.request.body.raw;\r",
									"    const jsonBody = JSON.parse(body);\r",
									"    jsonBody.forEach((item) => {\r",
									"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('extractionProb').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('rarity').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('image').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('damage').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('speed').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('critical').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('accuracy').that.is.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response body matches expected result\", function () {\r",
									"    const requestBody = pm.request.body.raw;\r",
									"    const jsonData = JSON.parse(requestBody)\r",
									"    let n = 0;\r",
									"\r",
									"    if (Array.isArray(jsonData)) { \r",
									"        n = jsonData.length;\r",
									"    } else {\r",
									"        n = 1;\r",
									"    }\r",
									"    console.log(\"n: \" + n);\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    var expectedResponse = \"Added \" + n + \" new gachas\";\r",
									"    pm.expect(response.success).to.eql(expectedResponse);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[    \r\n    {\r\n        \"name\": \"try\", \r\n        \"extractionProb\": 0.4, \r\n        \"rarity\": \"Rare\", \r\n        \"image\": \"path/to/image\", \r\n        \"damage\": 68, \r\n        \"speed\": 64, \r\n        \"critical\": 0.1, \r\n        \"accuracy\": 74\r\n    },\r\n    {\r\n        \"name\": \"try2\", \r\n        \"extractionProb\": 0.4, \r\n        \"rarity\": \"Rare\", \r\n        \"image\": \"path/to/image\", \r\n        \"damage\": 68, \r\n        \"speed\": 64, \r\n        \"critical\": 0.1, \r\n        \"accuracy\": 74\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8081/admin/edit/gacha",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"admin",
								"edit",
								"gacha"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_system_gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"admin_id = 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('admin_id', admin_id.toString());\r",
									"pm.environment.set('iat', iat);\r",
									"\r",
									"// Gacha\r",
									"gacha_id = 44;\r",
									"pm.environment.set('gacha_id', gacha_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is a JSON', function() {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json');\r",
									"});\r",
									"\r",
									"pm.test('Request body is not an array', function() {\r",
									"    const jsonBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.expect(jsonBody).not.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test('Request contains Authorization', function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body matches expected result\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var expectedResponse = \"Gacha (id: \" + pm.environment.get('gacha_id') + \") updated\";\r",
									"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{gacha_id}},\r\n    \"name\": \"try_patch\",\r\n    \"rarity\": \"Super Ultra Rare\",\r\n    \"extractionProb\": 0.0005\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8081/admin/edit/gacha",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"admin",
								"edit",
								"gacha"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_system_gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"gacha_id = 44;\r",
									"pm.environment.set('gacha_id', gacha_id);\r",
									"\r",
									"// ADMIN\r",
									"admin_id = 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('admin_id', admin_id.toString());\r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is a JSON', function() {\r",
									"    pm.response.to.have.header('Content-Type', 'application/json');\r",
									"});\r",
									"\r",
									"pm.test('Request contains Authorization', function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test('Response contains field', function() {\r",
									"    pm.expect(pm.response.json()).to.have.property('success');\r",
									"})\r",
									"\r",
									"pm.test(\"Response body matches expected result\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var expectedResponse = \"Gacha (id: \" + pm.environment.get('gacha_id') + \") deleted from the system\";\r",
									"    pm.expect(jsonData.success).to.eql(expectedResponse);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8081/admin/edit/gacha/{{gacha_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"admin",
								"edit",
								"gacha",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "roll_standard",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"user_id = Math.floor(Math.random() * 10) + 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('user_id', user_id.toString());  \r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response header should contains Authorization field\", function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test(\"Response fields\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{user_id}}\",\r\n    \"role\": \"user\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8080/roll/standard",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roll",
								"standard"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll_gold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"user_id = Math.floor(Math.random() * 10) + 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('user_id', user_id.toString());\r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response header should contains Authorization field\", function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test(\"Response fields\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{user_id}}\",\r\n    \"role\": \"user\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8080/roll/gold",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roll",
								"gold"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll_platinum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"user_id = Math.floor(Math.random() * 10) + 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('user_id', user_id.toString());\r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should be JSON\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response header should contains Authorization field\", function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test(\"Response fields\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{user_id}}\",\r\n    \"role\": \"user\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://localhost:8080/roll/platinum",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"roll",
								"platinum"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_grouped_collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"user_id = Math.floor(Math.random() * 10) + 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('user_id', user_id.toString());  \r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response header should contains Authorization field\", function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item).to.have.property('id');\r",
									"        pm.expect(typeof item.id).to.eql('number');\r",
									"\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(typeof item.name).to.eql('string');;\r",
									"\r",
									"        pm.expect(item).to.have.property('rarity');\r",
									"        pm.expect(typeof item.rarity).to.eql('string');\r",
									"\r",
									"        pm.expect(item).to.have.property('image');\r",
									"        pm.expect(typeof item.image).to.eql('string');\r",
									"\r",
									"        pm.expect(item).to.have.property('quantity');\r",
									"        pm.expect(typeof item.quantity).to.eql('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test('Quantity is > 0', function() {\r",
									"    const jsonData = pm.response.json()\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item.quantity).to.be.greaterThan(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed rarity values\", function () {\r",
									"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(allowedValues).to.include(item.rarity);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{user_id}}\",\r\n    \"role\": \"user\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8080/collection/grouped",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"collection",
								"grouped"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_user_collection",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"user_id = Math.floor(Math.random() * 10) + 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"pm.environment.set('user_id', user_id.toString());\r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response header should contains Authorization field\", function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item).to.have.property('idOwn');\r",
									"        pm.expect(typeof item.idOwn).to.eql('number');\r",
									"\r",
									"        pm.expect(item).to.have.property('gachaId');\r",
									"        pm.expect(typeof item.gachaId).to.eql('number');\r",
									"\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(typeof item.name).to.eql('string');;\r",
									"\r",
									"        pm.expect(item).to.have.property('rarity');\r",
									"        pm.expect(typeof item.rarity).to.eql('string');\r",
									"\r",
									"        pm.expect(item).to.have.property('image');\r",
									"        pm.expect(typeof item.image).to.eql('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed rarity values\", function () {\r",
									"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(allowedValues).to.include(item.rarity);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{user_id}}\",\r\n    \"role\": \"user\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:8080/collection",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "see_a_specific_gacha_owned",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate gacha_id\r",
									"gacha_id = 16;\r",
									"\r",
									"// Generate info for jwt token\r",
									"user_id = 7 // Math.floor(Math.random() * 10) + 1;\r",
									"iat = Math.floor(Date.now() / 1000);\r",
									"\r",
									"// Save all in env variables\r",
									"pm.environment.set('gacha_id', gacha_id);\r",
									"pm.environment.set('user_id', user_id.toString());\r",
									"pm.environment.set('iat', iat);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an array\", function () {\r",
									"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Response header should contains Authorization field\", function() {\r",
									"    pm.request.to.have.header('Authorization');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.be.an('array');\r",
									"\r",
									"    // Check properties\r",
									"    pm.expect(jsonData).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('extractionProb').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('rarity').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('image').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('damage').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('speed').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('critical').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('accuracy').that.is.a('number');\r",
									"});\r",
									"\r",
									"pm.test('Numeric values between 0 and 100', function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.damage).is.within(0, 100);\r",
									"    pm.expect(jsonData.speed).is.within(0, 100);\r",
									"    pm.expect(jsonData.damage).is.within(0, 100);\r",
									"    pm.expect(jsonData.accuracy).is.within(0, 100);\r",
									"});\r",
									"\r",
									"pm.test('Probabilities are between 0 and 1', function () {\r",
									"    pm.expect(pm.response.json().critical).to.be.within(0, 1);\r",
									"    pm.expect(pm.response.json().extractionProb).to.be.within(0, 1);\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed rarity values\", function () {\r",
									"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(allowedValues).to.include(jsonData.rarity);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\r\n    \"sub\": \"{{user_id}}\",\r\n    \"role\": \"user\",\r\n    \"iat\": {{iat}}\r\n}",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "secret",
									"value": "JwtGACHA2425",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:8080/collection/{{gacha_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"collection",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_system_gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item have some properties\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
									"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('image').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('rarity').that.is.a('string');\r",
									"        pm.expect(item).to.have.property('extractionProb').that.is.a('number');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Probabilities are between 0 and 1\", function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(item.extractionProb).is.within(0, 1);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed rarity values\", function () {\r",
									"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((item) => {\r",
									"        pm.expect(allowedValues).to.include(item.rarity);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:8080/system_collection",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"system_collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_a_specific_system_gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"gacha_id = Math.floor(Math.random() * 36) + 1;\r",
									"\r",
									"pm.environment.set('gacha_id', gacha_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not an array\", function() {\r",
									"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has expected properties\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).not.to.be.an('array');\r",
									"\r",
									"    // Check properties\r",
									"    pm.expect(jsonData).to.have.property('id').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('name').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('extractionProb').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('rarity').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('image').that.is.a('string');\r",
									"    pm.expect(jsonData).to.have.property('damage').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('speed').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('critical').that.is.a('number');\r",
									"    pm.expect(jsonData).to.have.property('accuracy').that.is.a('number');\r",
									"});\r",
									"\r",
									"pm.test('Numeric values between 0 and 100', function() {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.damage).is.within(0, 100);\r",
									"    pm.expect(jsonData.speed).is.within(0, 100);\r",
									"    pm.expect(jsonData.damage).is.within(0, 100);\r",
									"    pm.expect(jsonData.accuracy).is.within(0, 100);\r",
									"});\r",
									"\r",
									"pm.test('Probabilities are between 0 and 1', function () {\r",
									"    pm.expect(pm.response.json().critical).to.be.within(0, 1);\r",
									"    pm.expect(pm.response.json().extractionProb).to.be.within(0, 1);\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed rarity values\", function () {\r",
									"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(allowedValues).to.include(jsonData.rarity);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:8080/system_collection/{{gacha_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"system_collection",
								"{{gacha_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}