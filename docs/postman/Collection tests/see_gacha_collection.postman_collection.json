{
	"info": {
		"_postman_id": "185d32de-ab3f-40d3-8fb4-b0636644c215",
		"name": "GACHA - See collection",
		"description": "<u><b>USER ENDPOINTS</b></u>\n\n- get_grouped_collection\n    \n- get_user_collection (its own collection)\n    \n- see_a_specific_gacha_owned (see an owned gacha)\n    \n\n<u><b>ADMIN ENDPOINTS</b></u>\n\n- see_users_collection (see collection of all users)\n    \n- see_a_specific_user_collection\n    \n\n<u><b>COMMON ENDPOINTS</b></u>\n\n- get_system_gacha\n    \n- get_a_specific_system_gacha (see info about a system gacha)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39662462"
	},
	"item": [
		{
			"name": "get_grouped_collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"user_id = Math.floor(Math.random() * 10) + 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('user_id', user_id.toString());  \r",
							"pm.environment.set('iat', iat);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response header should contains Authorization field\", function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item has expected properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(typeof item.id).to.eql('number');\r",
							"\r",
							"        pm.expect(item).to.have.property('name');\r",
							"        pm.expect(typeof item.name).to.eql('string');;\r",
							"\r",
							"        pm.expect(item).to.have.property('rarity');\r",
							"        pm.expect(typeof item.rarity).to.eql('string');\r",
							"\r",
							"        pm.expect(item).to.have.property('image');\r",
							"        pm.expect(typeof item.image).to.eql('string');\r",
							"\r",
							"        pm.expect(item).to.have.property('quantity');\r",
							"        pm.expect(typeof item.quantity).to.eql('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test('Quantity is > 0', function() {\r",
							"    const jsonData = pm.response.json()\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item.quantity).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(allowedValues).to.include(item.rarity);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{user_id}}\",\r\n    \"role\": \"user\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5007/collection/grouped",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5007",
					"path": [
						"collection",
						"grouped"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_user_collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"user_id = Math.floor(Math.random() * 10) + 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('user_id', user_id.toString());\r",
							"pm.environment.set('iat', iat);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response header should contains Authorization field\", function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item has expected properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('idOwn');\r",
							"        pm.expect(typeof item.idOwn).to.eql('number');\r",
							"\r",
							"        pm.expect(item).to.have.property('gachaId');\r",
							"        pm.expect(typeof item.gachaId).to.eql('number');\r",
							"\r",
							"        pm.expect(item).to.have.property('name');\r",
							"        pm.expect(typeof item.name).to.eql('string');;\r",
							"\r",
							"        pm.expect(item).to.have.property('rarity');\r",
							"        pm.expect(typeof item.rarity).to.eql('string');\r",
							"\r",
							"        pm.expect(item).to.have.property('image');\r",
							"        pm.expect(typeof item.image).to.eql('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(allowedValues).to.include(item.rarity);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{user_id}}\",\r\n    \"role\": \"user\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5007/collection",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5007",
					"path": [
						"collection"
					]
				}
			},
			"response": []
		},
		{
			"name": "see_a_specific_gacha_owned",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate gacha_id\r",
							"gacha_id = 16;\r",
							"\r",
							"// Generate info for jwt token\r",
							"user_id = Math.floor(Math.random() * 10) + 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"// Save all in env variables\r",
							"pm.environment.set('gacha_id', gacha_id);\r",
							"pm.environment.set('user_id', user_id.toString());\r",
							"pm.environment.set('iat', iat);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not an array\", function () {\r",
							"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response header should contains Authorization field\", function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item has expected properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).not.to.be.an('array');\r",
							"\r",
							"    // Check properties\r",
							"    pm.expect(jsonData).to.have.property('id').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('name').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('extractionProb').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('rarity').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('image').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('damage').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('speed').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('critical').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('accuracy').that.is.a('number');\r",
							"});\r",
							"\r",
							"pm.test('Numeric values between 0 and 100', function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.damage).is.within(0, 100);\r",
							"    pm.expect(jsonData.speed).is.within(0, 100);\r",
							"    pm.expect(jsonData.damage).is.within(0, 100);\r",
							"    pm.expect(jsonData.accuracy).is.within(0, 100);\r",
							"});\r",
							"\r",
							"pm.test('Probabilities are between 0 and 1', function () {\r",
							"    pm.expect(pm.response.json().critical).to.be.within(0, 1);\r",
							"    pm.expect(pm.response.json().extractionProb).to.be.within(0, 1);\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(allowedValues).to.include(jsonData.rarity);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{user_id}}\",\r\n    \"role\": \"user\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5007/collection/{{gacha_id}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5007",
					"path": [
						"collection",
						"{{gacha_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "see_users_collections",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"admin_id = 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response header should contains Authorization field\", function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test('Each item contains an array', function () {\r",
							"    const jsonData = pm.response.json()\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('gachas').that.is.an('array');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should contain a gachas array with the required attributes\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        // Check user and gacha sub items\r",
							"        pm.expect(item).to.have.property('user_id').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('gachas').that.is.an('array');\r",
							"\r",
							"        // Per ogni gacha, verifica che abbia gli attributi richiesti\r",
							"        item.gachas.forEach((gacha) => {\r",
							"            pm.expect(gacha).to.have.property('gachaId').that.is.a('number');\r",
							"            pm.expect(gacha).to.have.property('idOwn').that.is.a('number');\r",
							"            pm.expect(gacha).to.have.property('image').that.is.a('string');\r",
							"            pm.expect(gacha).to.have.property('name').that.is.a('string');\r",
							"            pm.expect(gacha).to.have.property('rarity').that.is.a('string');\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        // Check rarity level for each gacha sub array\r",
							"        item.gachas.forEach((gacha) => {\r",
							"            pm.expect(allowedValues).to.include(gacha.rarity);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5007/admin/collections",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5007",
					"path": [
						"admin",
						"collections"
					]
				}
			},
			"response": []
		},
		{
			"name": "see_a_specific_user_collection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"admin_id = 1;\r",
							"iat = Math.floor(Date.now() / 1000);\r",
							"user_id = Math.floor(Math.random() * 10) + 1;\r",
							"\r",
							"// Add to env variables\r",
							"pm.environment.set('admin_id', admin_id.toString());\r",
							"pm.environment.set('iat', iat);\r",
							"pm.environment.set('user_id', user_id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status is 200', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response header should contains Authorization field\", function() {\r",
							"    pm.request.to.have.header('Authorization');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item should contain a gachas array with the required attributes\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('gachaId').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('idOwn').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('image').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('rarity').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(allowedValues).to.include(item.rarity);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "payload",
							"value": "{\r\n    \"sub\": \"{{admin_id}}\",\r\n    \"role\": \"admin\",\r\n    \"iat\": {{iat}}\r\n}",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{\r\n  \"alg\": \"HS256\",\r\n  \"typ\": \"JWT\"\r\n}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "secret",
							"value": "JwtGACHA2425",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5007/admin/collections/{{user_id}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5007",
					"path": [
						"admin",
						"collections",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_system_gacha",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item have some properties\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('image').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('rarity').that.is.a('string');\r",
							"        pm.expect(item).to.have.property('extractionProb').that.is.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Probabilities are between 0 and 1\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(item.extractionProb).is.within(0, 1);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach((item) => {\r",
							"        pm.expect(allowedValues).to.include(item.rarity);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5007/system_collection",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5007",
					"path": [
						"system_collection"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_a_specific_system_gacha",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"gacha_id = 37 // Math.floor(Math.random() * 36) + 1;\r",
							"\r",
							"pm.environment.set('gacha_id', gacha_id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is not an array\", function() {\r",
							"    pm.expect(pm.response.json()).not.to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each item has expected properties\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).not.to.be.an('array');\r",
							"\r",
							"    // Check properties\r",
							"    pm.expect(jsonData).to.have.property('id').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('name').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('extractionProb').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('rarity').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('image').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('damage').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('speed').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('critical').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('accuracy').that.is.a('number');\r",
							"});\r",
							"\r",
							"pm.test('Numeric values between 0 and 100', function() {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.damage).is.within(0, 100);\r",
							"    pm.expect(jsonData.speed).is.within(0, 100);\r",
							"    pm.expect(jsonData.damage).is.within(0, 100);\r",
							"    pm.expect(jsonData.accuracy).is.within(0, 100);\r",
							"});\r",
							"\r",
							"pm.test('Probabilities are between 0 and 1', function () {\r",
							"    pm.expect(pm.response.json().critical).to.be.within(0, 1);\r",
							"    pm.expect(pm.response.json().extractionProb).to.be.within(0, 1);\r",
							"});\r",
							"\r",
							"pm.test(\"Allowed rarity values\", function () {\r",
							"    var allowedValues = ['Common', 'Rare', 'Super Rare', 'Ultra Rare', 'Super Ultra Rare'];\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(allowedValues).to.include(jsonData.rarity);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5007/system_collection/{{gacha_id}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5007",
					"path": [
						"system_collection",
						"{{gacha_id}}"
					]
				}
			},
			"response": []
		}
	]
}